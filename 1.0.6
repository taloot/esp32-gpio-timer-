#include <WiFi.h>
#include <WebServer.h>
#include <SPIFFS.h>
#include <time.h>
#include <esp_system.h>

const char* ssid = "HUAWEI 4G";
const char* password = "0506211557";
const char* ntpServer = "pool.ntp.org";
WebServer server(80);
const int maxPins = 9;
const int timezoneOffset = 10800;
int numPins = 0;
int floatPin = -1;
int pins[maxPins];
int startMinutes[maxPins];
const char* version = "1.0.5";

struct Schedule {
  uint8_t startHour, startMinute, endHour, endMinute, mode, inputPin, subMode;
  uint16_t freqOn, freqOff, debounceTime, analogThreshold;
} schedules[maxPins];

#define SET_PIN(index, pin) (pins[index] = pin, pinMode(pin, OUTPUT), digitalWrite(pin, LOW), saveConfig())
#define REDIRECT() (server.sendHeader("Location", "/"), server.send(303), void())
#define SAVE_CONFIG(file, data) (file.write((uint8_t*)&data, sizeof(data)))
#define LOAD_CONFIG(file, data) (file.read((uint8_t*)&data, sizeof(data)))
#define SET_PIN_MODE(pin, mode) pinMode(pin, mode)
#define DIGITAL_WRITE(pin, state) digitalWrite(pin, state)
#define DIGITAL_READ(pin) digitalRead(pin)

void setupWiFi() {
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) delay(500);
}

void initSPIFFS() {
  if (!SPIFFS.begin(true)) return;
}

void checkSchedules() {
  struct tm timeInfo;
  if (!getLocalTime(&timeInfo)) return;
  uint16_t currentMinutes = timeInfo.tm_hour * 60 + timeInfo.tm_min;
  static uint32_t lastMillis[maxPins] = {0}, lastDebounce[maxPins] = {0};
  static int lastState[maxPins] = {LOW}, buttonState[maxPins] = {LOW};

  for (int i = 0; i < numPins; i++) {
    uint32_t elapsed;
    int reading;
    switch (schedules[i].subMode) {
      case 0: elapsed = (millis() - lastMillis[i]) / 60000; break;
      case 1: elapsed = (millis() - lastMillis[i]) / 1000; break;
      case 2: elapsed = millis() - lastMillis[i]; break;
    }
    switch (schedules[i].mode) {
      case 0: DIGITAL_WRITE(pins[i], LOW); break;
      case 1: DIGITAL_WRITE(pins[i], (currentMinutes >= startMinutes[i] && currentMinutes < schedules[i].endHour * 60 + schedules[i].endMinute) ? HIGH : LOW); break;
      case 2: 
        if (elapsed >= schedules[i].freqOn + schedules[i].freqOff) lastMillis[i] = millis();
        DIGITAL_WRITE(pins[i], elapsed < schedules[i].freqOn ? HIGH : LOW); 
        break;
      case 3: 
        reading = DIGITAL_READ(schedules[i].inputPin);
        if (reading != lastState[i]) lastDebounce[i] = millis();
        if ((millis() - lastDebounce[i]) > schedules[i].debounceTime) { 
          if (reading != buttonState[i]) { 
            buttonState[i] = reading; 
            DIGITAL_WRITE(pins[i], buttonState[i]); 
          } 
        } 
        lastState[i] = reading; 
        break;
      case 4: 
        int analogValue = analogRead(schedules[i].inputPin);
        DIGITAL_WRITE(pins[i], analogValue >= schedules[i].analogThreshold ? HIGH : LOW);
        break;
    }
  }
}

void saveConfig() {
  File file = SPIFFS.open("/gpio_cfg.bin", FILE_WRITE);
  if (!file) return;
  SAVE_CONFIG(file, numPins);
  SAVE_CONFIG(file, floatPin);
  for (int i = 0; i < numPins; i++) {
    SAVE_CONFIG(file, pins[i]);
    SAVE_CONFIG(file, schedules[i]);
  }
  file.close();
}

void loadConfig() {
  File file = SPIFFS.open("/gpio_cfg.bin", FILE_READ);
  if (!file) return;
  LOAD_CONFIG(file, numPins);
  LOAD_CONFIG(file, floatPin);
  for (int i = 0; i < numPins; i++) {
    LOAD_CONFIG(file, pins[i]);
    LOAD_CONFIG(file, schedules[i]);
  }
  file.close();
}

float getCPUTemperature() {
  return temperatureRead();
}

size_t getSPIFFSFreeSpace() {
  return SPIFFS.totalBytes() - SPIFFS.usedBytes();
}

const char htmlPage[] PROGMEM = R"rawliteral(
<script>
function req(u, c) {
  var x = new XMLHttpRequest();
  x.open('GET', u, true);
  x.onload = function() {
    if (x.status === 200) c(x.responseText);
  };
  x.send();
}
function tg(i) {
  req('/tgl?i=' + i, function(r) {
    document.getElementById('st-' + i).textContent = r;
  });
}
function showSettings() {
  var m = document.getElementById('mode').value;
  document.getElementById('schedule').style.display = (m == '1') ? 'block' : 'none';
  document.getElementById('frequency').style.display = (m == '2') ? 'block' : 'none';
  document.getElementById('inputPin').style.display = (m == '3') ? 'block' : 'none';
  document.getElementById('analogRead').style.display = (m == '4') ? 'block' : 'none';
}
function removeGPIO(i) {
  req('/rmp?i=' + i, function() {
    location.reload();
  });
}
function addGPIO() {
  var g = document.getElementById('np').value;
  var m = document.getElementById('mode').value;
  var p = '/addp?gpio=' + g + '&mode=' + m;
  if (m == '1') {
    p += '&sH=' + document.getElementById('sH').value + '&sM=' + document.getElementById('sM').value + '&eH=' + document.getElementById('eH').value + '&eM=' + document.getElementById('eM').value;
  } else if (m == '2') {
    p += '&fO=' + document.getElementById('fO').value + '&fF=' + document.getElementById('fF').value + '&subMode=' + document.getElementById('subMode').value;
  } else if (m == '3') {
    p += '&i=' + document.getElementById('i').value + '&dT=' + document.getElementById('dT').value;
  } else if (m == '4') {
    p += '&i=' + document.getElementById('analogPin').value + '&analogThreshold=' + document.getElementById('analogThreshold').value;
  }
  req(p, function() {
    location.reload();
  });
}
</script>
<div>
  <input type='number' id='np' placeholder='Enter GPIO number'>
  <select id='mode' onchange='showSettings()'>
    <option value='0'>Always Off</option>
    <option value='1'>Scheduled</option>
    <option value='2'>Frequency</option>
    <option value='3'>Input Pin with Debounce</option>
    <option value='4'>Analog Read</option>
  </select>
  <div id='schedule' style='display:none;'>
    Start Hour:<input type='number' id='sH'><br>
    Start Minute:<input type='number' id='sM'><br>
    End Hour:<input type='number' id='eH'><br>
    End Minute:<input type='number' id='eM'><br>
  </div>
  <div id='frequency' style='display:none;'>
    On Time:<input type='number' id='fO'><br>
    Off Time:<input type='number' id='fF'><br>
    Sub Mode:<select id='subMode'>
      <option value='0'>Minutes</option>
      <option value='1'>Seconds</option>
      <option value='2'>Milliseconds</option>
    </select><br>
  </div>
  <div id='inputPin' style='display:none;'>
    Input GPIO:<input type='number' id='i'><br>
    Debounce Time(ms):<input type='number' id='dT'><br>
  </div>
  <div id='analogRead' style='display:none;'>
    Analog Pin:<input type='number' id='analogPin'><br>
    Threshold:<input type='number' id='analogThreshold'><br>
  </div>
  <button onclick='addGPIO()'>Add GPIO</button>
</div>
<div  <button onclick='req("/save", function(){location.reload();})'>Save Settings</button>
  <button onclick='req("/restore", function(){location.reload();})'>Restore Settings</button>
  <button onclick='req("/format", function(){location.reload();})'>Format SPIFFS</button>
</div>
)rawliteral";

String getHtmlPage() {
  return String(FPSTR(htmlPage));
}

void handleRoot() {
  String page = "<html><head><title>ESP32 Control</title></head><body><h1>ESP32 GPIO Control</h1>";
  page += "<div>Version: " + String(version) + "</div>";
  page += "<div>Free Heap: " + String(esp_get_free_heap_size()) + " bytes</div>";
  page += "<div>SPIFFS Free Space: " + String(getSPIFFSFreeSpace()) + " bytes</div>";
  page += "<div>CPU Temp: " + String(getCPUTemperature()) + " &#8451;</div>";
  page += "<div id='time'></div>";
  page += "<h2>GPIO Settings</h2><ul>";
  
  for (int i = 0; i < numPins; i++) {
    page += "<li>GPIO " + String(pins[i]) + ": Mode " + String(schedules[i].mode);
    if (schedules[i].mode == 1) {
      page += " (Scheduled: " + String(schedules[i].startHour) + ":" + String(schedules[i].startMinute) + " - " + String(schedules[i].endHour) + ":" + String(schedules[i].endMinute) + ")";
    } else if (schedules[i].mode == 2) {
      page += " (Frequency: On " + String(schedules[i].freqOn) + " ms, Off " + String(schedules[i].freqOff) + " ms)";
    } else if (schedules[i].mode == 3) {
      page += " (Input Pin: " + String(schedules[i].inputPin) + ", Debounce: " + String(schedules[i].debounceTime) + " ms)";
    } else if (schedules[i].mode == 4) {
      page += " (Analog Pin: " + String(schedules[i].inputPin) + ", Threshold: " + String(schedules[i].analogThreshold) + ")";
    }
    page += "</li>";
  }
  
  page += "</ul>";
  page += getHtmlPage();
  page += "<script>setInterval(function(){";
  
  // Update time
  page += "req('/gettime', function(res){document.getElementById('time').textContent = 'Current Time: ' + res;});";

  // Update GPIO statuses
  for (int i = 0; i < numPins; i++) {
    if (schedules[i].mode == 3) {
      page += "req('/getinput?i=" + String(i) + "', function(res){document.getElementById('val-" + String(i) + "').textContent = res;});";
    } else if (schedules[i].mode == 4) {
      page += "req('/getanalog?i=" + String(i) + "', function(res){document.getElementById('val-" + String(i) + "').textContent = res;});";
    }
  }
  page += "}, 1000);</script></body></html>";
  server.send(200, "text/html", page);
}

void handleToggle() { 
  int index = server.arg("i").toInt(); 
  DIGITAL_WRITE(pins[index], !DIGITAL_READ(pins[index])); 
  server.send(200, "text/plain", DIGITAL_READ(pins[index]) ? "ON" : "OFF"); 
}

void handleSetPin() {
  int gpio = server.arg("gpio").toInt(), mode = server.arg("mode").toInt();
  bool isAdd = server.uri() == "/addp";
  if (isAdd && numPins < maxPins) {
    SET_PIN(numPins, gpio); schedules[numPins].mode = mode;
    if (mode == 1) { 
      schedules[numPins].startHour = server.arg("sH").toInt(); 
      schedules[numPins].startMinute = server.arg("sM").toInt(); 
      schedules[numPins].endHour = server.arg("eH").toInt(); 
      schedules[numPins].endMinute = server.arg("eM").toInt(); 
      startMinutes[numPins] = schedules[numPins].startHour * 60 + schedules[numPins].startMinute; 
    } else if (mode == 2) { 
      schedules[numPins].freqOn = server.arg("fO").toInt(); 
      schedules[numPins].freqOff = server.arg("fF").toInt(); 
      schedules[numPins].subMode = server.arg("subMode").toInt(); 
    } else if (mode == 3) { 
      schedules[numPins].inputPin = server.arg("i").toInt(); 
      schedules[numPins].debounceTime = server.arg("dT").toInt(); 
      SET_PIN_MODE(schedules[numPins].inputPin, INPUT); 
    } else if (mode == 4) { 
      schedules[numPins].inputPin = server.arg("analogPin").toInt(); 
      schedules[numPins].analogThreshold = server.arg("analogThreshold").toInt(); 
      SET_PIN_MODE(schedules[numPins].inputPin, INPUT); 
    }
    numPins++;
  } else if (server.uri() == "/rmp") {
    int index = server.arg("i").toInt();
    if (index < numPins) {
      for (int j = index; j < numPins - 1; j++) { 
        pins[j] = pins[j + 1]; 
        schedules[j] = schedules[j + 1]; 
        startMinutes[j] = startMinutes[j + 1]; 
      }
      numPins--;
    }
  }
  saveConfig(); REDIRECT();
}

void handleSetFloatPin() { 
  floatPin = server.arg("gpio").toInt(); 
  if (floatPin >= 0) SET_PIN_MODE(floatPin, INPUT); 
  saveConfig(); REDIRECT(); 
}

void handleGetFloatPin() { 
  server.send(200, "text/plain", floatPin >= 0 ? String(DIGITAL_READ(floatPin)) : "0"); 
}

void handleGetTime() { 
  struct tm timeInfo; 
  if (!getLocalTime(&timeInfo)) { 
    server.send(200, "text/plain", "Failed to get time"); 
    return; 
  } 
  char timeString[32]; 
  strftime(timeString, sizeof(timeString), "%Y-%m-%d %H:%M:%S", &timeInfo); 
  server.send(200, "text/plain", timeString); 
}

void handleGetInput() {
  int index = server.arg("i").toInt();
  server.send(200, "text/plain", String(DIGITAL_READ(schedules[index].inputPin)));
}

void handleGetAnalog() {
  int index = server.arg("i").toInt();
  server.send(200, "text/plain", String(analogRead(schedules[index].inputPin)));
}

void handleSave() {
  saveConfig();
  server.send(200, "text/plain", "Settings saved");
}

void handleRestore() {
  loadConfig();
  server.send(200, "text/plain", "Settings restored");
}

void handleFormat() {
  SPIFFS.format();
  server.send(200, "text/plain", "SPIFFS formatted");
}

void setup() {
  setupWiFi(); 
  initSPIFFS(); 
  configTime(timezoneOffset, 0, ntpServer); 
  loadConfig();
  for (int i = 0; i < numPins; i++) {
    startMinutes[i] = schedules[i].startHour * 60 + schedules[i].startMinute;
    SET_PIN_MODE(pins[i], OUTPUT);
    DIGITAL_WRITE(pins[i], LOW);
    if (schedules[i].mode == 3 || schedules[i].mode == 4) {
      SET_PIN_MODE(schedules[i].inputPin, INPUT);
    }
  }
  if (floatPin >= 0) SET_PIN_MODE(floatPin, INPUT);
  server.on("/", handleRoot); 
  server.on("/tgl", handleToggle); 
  server.on("/addp", handleSetPin); 
  server.on("/rmp", handleSetPin); 
  server.on("/setfloat", handleSetFloatPin); 
  server.on("/getfloat", handleGetFloatPin); 
  server.on("/gettime", handleGetTime); 
  server.on("/getinput", handleGetInput); 
  server.on("/getanalog", handleGetAnalog); 
  server.on("/save", handleSave); 
  server.on("/restore", handleRestore); 
  server.on("/format", handleFormat); 
  server.begin();
}

void loop() {
  server.handleClient();
  checkSchedules();
}
