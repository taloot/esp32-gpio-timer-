#include <WiFi.h>
#include <WebServer.h>
#include <SPIFFS.h>
#include <time.h>

const char *ss = "HUAWEI 4G", *pwd = "zzz", *ntp = "pool.ntp.org";
WebServer srv(80); const int mp = 9, gmt = 10800; int np = 0, fl = -1, p[mp], sm[mp];
struct Sch { uint8_t sH, sM, eH, eM, m, i; uint16_t fO, fF, dT; } sch[mp];

#define SG(i, g) (p[i] = g, pinMode(g, OUTPUT), digitalWrite(g, LOW), svC())
#define RT() (srv.sendHeader("Location", "/"), srv.send(303), void())

void sw() { WiFi.begin(ss, pwd); while (WiFi.status() != WL_CONNECTED) delay(500); }
void is() { if (!SPIFFS.begin(true)) return; }

String gH() {
  String h = "<script>function um(){var m=document.getElementById('mo').value;document.getElementById('sc').style.display=(m=='1')?'block':'none';document.getElementById('fr').style.display=(m=='2')?'block':'none';document.getElementById('in').style.display=(m=='3')?'block':'none';}</script>";
  for (int i = 0; i < np; i++) {
    h += "<div class='col-md-4'><div class='card'><div class='card-body'><h5>GPIO "+String(p[i])+"</h5><p>"+String(digitalRead(p[i])?"ON":"OFF")+"</p>"
         "<p>Mode: "+String(sch[i].m == 0 ? "Off" : (sch[i].m == 1 ? "Scheduled" : (sch[i].m == 2 ? "Frequency" : "Input")))+"</p>";
    if (sch[i].m == 1) {
      h += "<p>Start: "+String(sch[i].sH)+":"+String(sch[i].sM)+"</p>"
           "<p>End: "+String(sch[i].eH)+":"+String(sch[i].eM)+"</p>";
    } else if (sch[i].m == 2) {
      h += "<p>On Duration: "+String(sch[i].fO)+" minutes</p>"
           "<p>Off Duration: "+String(sch[i].fF)+" minutes</p>";
    } else if (sch[i].m == 3) {
      h += "<p>Input Pin: "+String(sch[i].i)+"</p>"
           "<p>Debounce Time: "+String(sch[i].dT)+" ms</p>";
    }
    h += "<button onclick=\"location.href='/rmp?i="+String(i)+"'\" class='btn btn-danger mt-2'>Remove GPIO</button></div></div></div>";
  }
  if (np < 9) {
    h += "<div class='col-md-12 mt-4'><div class='input-group'><input type='number' id='np' class='form-control' placeholder='Enter GPIO number'>"
         "<label for='mo'>Mode:</label><select id='mo' class='form-control' onchange='um()'>"
         "<option value='0'>Off</option>"
         "<option value='1'>Scheduled</option>"
         "<option value='2'>Frequency</option>"
         "<option value='3'>Input</option></select>"
         "<div id='sc' style='display:none'>Start:<input type='number' id='sH' min='0' max='23' class='form-control mb-2'>"
         "<input type='number' id='sM' min='0' max='59' class='form-control mb-2'>End:<input type='number' id='eH' min='0' max='23' class='form-control mb-2'>"
         "<input type='number' id='eM' min='0' max='59' class='form-control mb-2'></div>"
         "<div id='fr' style='display:none'>On:<input type='number' id='fO' min='1' class='form-control mb-2'>Off:<input type='number' id='fF' min='1' class='form-control mb-2'></div>"
         "<div id='in' style='display:none'>Input Pin:<input type='number' id='i' min='0' max='39' class='form-control mb-2'>Debounce Time:<input type='number' id='dT' min='1' class='form-control mb-2'></div>"
         "<div class='input-group-append'><button class='btn btn-success' onclick=\"location.href='/addp?gpio='+document.getElementById('np').value+'&m='+document.getElementById('mo').value+'&sH='+document.getElementById('sH').value+'&sM='+document.getElementById('sM').value+'&eH='+document.getElementById('eH').value+'&eM='+document.getElementById('eM').value+'&fO='+document.getElementById('fO').value+'&fF='+document.getElementById('fF').value+'&i='+document.getElementById('i').value+'&dT='+document.getElementById('dT').value\">Add GPIO</button></div></div></div>";
  }
  return h;
}

void hR() {
  String pg = "<html><head><title>ESP32 Control</title><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css'>"
              "<script src='https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js'></script>"
              "<script>function upT(){fetch('/gettime').then(r=>r.text()).then(d=>{document.getElementById('time').innerHTML=d;});}setInterval(upT,1000);upT();</script>"
              "<style>@media (max-width: 768px){.col-md-4{width:100%;margin-bottom:15px;}}</style></head><body><div class='container mt-5'><h1 class='text-center mb-4'>ESP32 GPIO Control</h1>"
              "<div id='time' class='text-center mb-3'>Loading time...</div><div class='row'>" + gH() + "</div></div></body></html>";
  srv.send(200, "text/html", pg);
}

void hT() {
  int i = srv.arg("i").toInt();
  digitalWrite(p[i], !digitalRead(p[i]));
  srv.send(200, "text/plain", digitalRead(p[i]) ? "ON" : "OFF");
}

void hSP() {
  int i = srv.arg("i").toInt(), gpio = srv.arg("gpio").toInt();
  bool isAdd = srv.uri() == "/addp", isRm = srv.uri() == "/rmp";
  if (isAdd && np < mp) {
    sch[np].m = srv.arg("m").toInt();
    sch[np].sH = srv.arg("sH").toInt();
    sch[np].sM = srv.arg("sM").toInt();
    sch[np].eH = srv.arg("eH").toInt();
    sch[np].eM = srv.arg("eM").toInt();
    sch[np].fO = srv.arg("fO").toInt();
    sch[np].fF = srv.arg("fF").toInt();
    sch[np].i = srv.arg("i").toInt();
    sch[np].dT = srv.arg("dT").toInt();
    SG(np++, gpio);
  } else if (isRm && i < np) {
    for (int j = i; j < np - 1; j++) {
      p[j] = p[j + 1];
      sch[j] = sch[j + 1];
      sm[j] = sm[j + 1];
    }
    np--;
  }
  svC();
  RT();
}

void hSS() {
  int i = srv.arg("i").toInt();
  sch[i].sH = srv.arg("sH").toInt();
  sch[i].sM = srv.arg("sM").toInt();
  sch[i].eH = srv.arg("eH").toInt();
  sch[i].eM = srv.arg("eM").toInt();
  sm[i] = sch[i].sH * 60 + sch[i].sM;
  svC();
  RT();
}

void hSF() {
  fl = srv.arg("gpio").toInt();
  if (fl >= 0) pinMode(fl, INPUT);
  svC();
  RT();
}

void hGF() {
  srv.send(200, "text/plain", fl >= 0 ? String(digitalRead(fl)) : "0");
}

void hGT() {
  struct tm t;
  if (!getLocalTime(&t)) {
    srv.send(200, "text/plain", "Failed to get time");
    return;
  }
  char ts[32];
  strftime(ts, sizeof(ts), "%Y-%m-%d %H:%M:%S", &t);
  srv.send(200, "text/plain", ts);
}

void cs() {
  struct tm t;
  if (!getLocalTime(&t)) return;
  uint16_t nm = t.tm_hour * 60 + t.tm_min;
  static uint32_t lm[mp] = {0}, ld[mp] = {0};
  static int ls[mp] = {LOW}, bs[mp] = {LOW};
  for (int i = 0; i < np; i++) {
    uint32_t el = (millis() - lm[i]) / 60000;
    switch (sch[i].m) {
      case 0:
        digitalWrite(p[i], LOW);
        break;
      case 1:
        digitalWrite(p[i], (nm >= sm[i] && nm < sch[i].eH * 60 + sch[i].eM) ? HIGH : LOW);
        break;
      case 2:
        if (el >= sch[i].fO + sch[i].fF) lm[i] = millis();
        digitalWrite(p[i], el < sch[i].fO ? HIGH : LOW);
        break;
      case 3:
        int r = digitalRead(sch[i].i);
        if (r != ls[i]) { ld[i] = millis(); }
        if ((millis() - ld[i]) > sch[i].dT) {
          if (r != bs[i]) {
            bs[i] = r;
            digitalWrite(p[i], bs[i]);
          }
        }
        ls[i] = r;
        break;
    }
  }
}

void svC() {
  File f = SPIFFS.open("/gpio_cfg.txt", FILE_WRITE);
  if (!f) return;
  f.printf("%d,%d", np, fl);
  for (int i = 0; i < np; i++) {
    f.printf(",%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
      p[i], sch[i].sH, sch[i].sM, sch[i].eH, sch[i].eM, sch[i].m,
      sch[i].fO, sch[i].fF, sch[i].i, sch[i].dT);
  }
  f.close();
}

void lg() {
  File f = SPIFFS.open("/gpio_cfg.txt", FILE_READ);
  if (!f) return;
  String c = f.readString();
  f.close();
  if (c.length() > 0) {
    int s = 0, e = c.indexOf(',');
    np = c.substring(s, e).toInt();
    s = e + 1;
    e = c.indexOf(',', s);
    fl = c.substring(s, e).toInt();
    s = e + 1;
    for (int i = 0; i < np; i++) {
      e = c.indexOf(',', s);
      p[i] = c.substring(s, e).toInt();
      s = e + 1;
      e = c.indexOf(',', s);
      sch[i].sH = c.substring(s, e).toInt();
      s = e + 1;
      e = c.indexOf(',', s);
      sch[i].sM = c.substring(s, e).toInt();
      s = e + 1;
      e = c.indexOf(',', s);
      sch[i].eH = c.substring(s, e).toInt();
      s = e + 1;
      e = c.indexOf(',', s);
      sch[i].eM = c.substring(s, e).toInt();
      s = e + 1;
      e = c.indexOf(',', s);
      sch[i].m = c.substring(s, e).toInt();
      s = e + 1;
      e = c.indexOf(',', s);
      sch[i].fO = c.substring(s, e).toInt();
      s = e + 1;
      e = c.indexOf(',', s);
      sch[i].fF = c.substring(s, e).toInt();
      s = e + 1;
      e = c.indexOf(',', s);
      sch[i].i = c.substring(s, e).toInt();
      s = e + 1;
      e = c.indexOf(',', s);
      sch[i].dT = c.substring(s, e).toInt();
      s = e + 1;
    }
  }
}

void setup() {
  sw();
  is();
  configTime(gmt, 0, ntp);
  lg();
  for (int i = 0; i < np; i++) {
    sm[i] = sch[i].sH * 60 + sch[i].sM;
    pinMode(p[i], OUTPUT);
    digitalWrite(p[i], LOW);
  }
  if (fl >= 0) pinMode(fl, INPUT);
  srv.on("/", hR);
  srv.on("/tgl", hT);
  srv.on("/setp", hSP);
  srv.on("/addp", hSP);
  srv.on("/rmp", hSP);
  srv.on("/sets", hSS);
  srv.on("/setfloat", hSF);
  srv.on("/getfloat", hGF);
  srv.on("/gettime", hGT);
  srv.begin();
}

void loop() {
  srv.handleClient();
  cs();
}
