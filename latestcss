#include <WiFi.h>
#include <WebServer.h>
#include <SPIFFS.h>
#include <time.h>

const char* ssid = "HUAWEI 4G";
const char* pwd = "0506211557";
WebServer srv(80);
const int maxP = 10;
int numP = 0, p[maxP];
struct Sch { uint8_t sH, sM, eH, eM; } sch[maxP];
const char* ntp = "pool.ntp.org";
const long gmt = 3 * 3600;
const int dst = 0;

// Pre-calculated schedule times in minutes (for chkSch optimization)
uint16_t schMinutes[maxP];

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, pwd);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi connected");
  if (!SPIFFS.begin(true)) {
    Serial.println("Failed to mount FS");
    return;
  }
  configTime(gmt, dst, ntp);
  loadCfg();

  // Calculate schedule minutes in setup
  for (int i = 0; i < numP; i++) {
    schMinutes[i] = sch[i].sH * 60 + sch[i].sM;
    pinMode(p[i], OUTPUT);
    digitalWrite(p[i], LOW);
  }

  srv.on("/", handleRoot);
  srv.on("/tgl", handleTgl);
  srv.on("/setp", handleSetP);
  srv.on("/addp", handleAddP);
  srv.on("/rmp", handleRmP);
  srv.on("/sets", handleSetS);
  srv.on("/gettime", handleGetTime);
  srv.begin();
  Serial.println("HTTP server started");
}

void loop() {
  srv.handleClient();
  chkSch();
}

void handleRoot() {
  String page = "<html><head><title>ESP32 Control</title>";
  page += "<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css'>"; 
  page += "<script src='https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js'></script>";  
  page += "<script src='https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js'></script>"; 
  page += "<script src='https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js'></script>"; 
  page += "<script>$(document).ready(function() {";
  page += "  $('.toggle-gpio').click(function() {";
  page += "    var pin = $(this).data('pin');";
  page += "    $.get('/tgl?i=' + pin, function(data) {";
  page += "      $('#status-' + pin).text(data);";
  page += "    });";
  page += "  });";
  page += "});</script>";
  page += "<style>";
  page += "  @media (max-width: 768px) {";
  page += "    .col-md-4 {";
  page += "      width: 100%;";
  page += "      margin-bottom: 15px;";
  page += "    }";
  page += "  }";
  page += "</style>";
  page += "</head><body>";
  page += "<div class='container mt-5'>";
  page += "  <h1 class='text-center mb-4'>ESP32 GPIO Control</h1>";
  page += "  <div id='time' class='text-center mb-3'>Loading time...</div>";
  page += "  <div class='row'>"; 
  page += genHTML();
  page += "  </div>"; 
  page += "</div>";
  page += "<script>function updTime(){fetch('/gettime').then(r=>r.text()).then(d=>{document.getElementById('time').innerHTML=d;});}setInterval(updTime,1000);updTime();</script>";
  page += "</body></html>";
  srv.send(200, "text/html", page);
}

void handleTgl() {
  int i = srv.arg("i").toInt();
  digitalWrite(p[i], !digitalRead(p[i]));
  srv.send(200, "text/plain", digitalRead(p[i]) ? "ON" : "OFF");
}

void handleSetP() {
  int i = srv.arg("i").toInt(), gpio = srv.arg("gpio").toInt();
  p[i] = gpio;
  pinMode(gpio, OUTPUT);
  digitalWrite(gpio, LOW);
  saveCfg();
  srv.sendHeader("Location", "/");
  srv.send(303);
}

void handleAddP() {
  if (numP < maxP) {
    int gpio = srv.arg("gpio").toInt();
    p[numP++] = gpio;
    pinMode(gpio, OUTPUT);
    digitalWrite(gpio, LOW);
    saveCfg();
  }
  srv.sendHeader("Location", "/");
  srv.send(303);
}

void handleRmP() {
  int i = srv.arg("i").toInt();
  if (i < numP) {
    for (int j = i; j < numP - 1; j++) {
      p[j] = p[j + 1];
      sch[j] = sch[j + 1];
      schMinutes[j] = schMinutes[j + 1];
    }
    numP--;
    saveCfg();
  }
  srv.sendHeader("Location", "/");
  srv.send(303);
}

void handleSetS() {
  int i = srv.arg("i").toInt();
  sch[i].sH = srv.arg("sH").toInt();
  sch[i].sM = srv.arg("sM").toInt();
  sch[i].eH = srv.arg("eH").toInt();
  sch[i].eM = srv.arg("eM").toInt();
  schMinutes[i] = sch[i].sH * 60 + sch[i].sM;
  saveCfg();
  srv.sendHeader("Location", "/");
  srv.send(303);
}

String genHTML() {
  String c = "";
  for (int i = 0; i < numP; i++) {
    c += "<div class='col-md-4 col-sm-6 mb-4'>"; 
    c += "  <div class='card'>";
    c += "    <div class='card-body'>";
    c += "      <h5 class='card-title'>GPIO " + String(i) + "</h5>";
    c += "      <p class='card-text' id='status-" + String(i) + "'>" + String(digitalRead(p[i]) ? "ON" : "OFF") + "</p>";
    c += "      <button class='btn btn-primary toggle-gpio' data-pin='" + String(i) + "'>Toggle</button>";
    c += "      <input type='number' value='" + String(p[i]) + "' id='p" + String(i) + "' class='form-control mt-2'>";
    c += "      <button onclick=\"location.href='/setp?i=" + String(i) + "&gpio='+document.getElementById('p" + String(i) + "').value\" class='btn btn-secondary mt-2'>Set GPIO</button>";
    c += "      <button onclick=\"location.href='/rmp?i=" + String(i) + "'\" class='btn btn-danger mt-2'>Remove GPIO</button>";
    c += "      <div class='mt-3'>Start:<input type='number' id='sH" + String(i) + "' value='" + String(sch[i].sH) + "' min='0' max='23' class='form-control'>";
    c += "      <input type='number' id='sM" + String(i) + "' value='" + String(sch[i].sM) + "' min='0' max='59' class='form-control'>";
    c += "      Stop:<input type='number' id='eH" + String(i) + "' value='" + String(sch[i].eH) + "' min='0' max='23' class='form-control'>";
    c += "      <input type='number' id='eM" + String(i) + "' value='" + String(sch[i].eM) + "' min='0' max='59' class='form-control'>";
    c += "      <button onclick=\"location.href='/sets?i=" + String(i) + "&sH='+document.getElementById('sH" + String(i) + "').value+'&sM='+document.getElementById('sM" + String(i) + "').value+'&eH='+document.getElementById('eH" + String(i) + "').value+'&eM='+document.getElementById('eM" + String(i) + "').value\" class='btn btn-info mt-2'>Set Times</button>";
    c += "      </div>"; // Close the schedule div
    c += "    </div>"; // Close card-body
    c += "  </div>"; // Close card
    c += "</div>"; // Close column
  }
  c += "<div class='col-md-12 mt-4'>";
  c += "  <div class='input-group'>";
  c += "    <input type='number' id='newp' class='form-control' placeholder='Enter GPIO number'>";
  c += "    <div class='input-group-append'>";
  c += "      <button class='btn btn-success' onclick=\"location.href='/addp?gpio='+document.getElementById('newp').value\">Add GPIO</button>";
  c += "    </div>";
  c += "  </div>";
  c += "</div>";
  return c;
}

void chkSch() {
  struct tm t;
  if (!getLocalTime(&t)) return;
  uint16_t nowM = t.tm_hour * 60 + t.tm_min;
  for (int i = 0; i < numP; i++) {
    digitalWrite(p[i], nowM >= schMinutes[i] && nowM < sch[i].eH * 60 + sch[i].eM ? HIGH : LOW);
  }
}

void saveCfg() {
  File f = SPIFFS.open("/gpio_cfg.txt", FILE_WRITE);
  if (!f) {
    Serial.println("Failed to open config file");
    return;
  }
  f.print(numP);
  for (int i = 0; i < numP; i++) {
    f.print("," + String(p[i]) + "," + String(sch[i].sH) + "," + String(sch[i].sM) + "," + String(sch[i].eH) + "," + String(sch[i].eM));
  }
  f.close();
}

void loadCfg() {
  File f = SPIFFS.open("/gpio_cfg.txt", FILE_READ);
  if (!f) {
    Serial.println("Failed to open config file");
    return;
  }
  String content = f.readString();
  f.close();
  if (content.length() > 0) {
    int s = 0, e = content.indexOf(',');
    numP = content.substring(s, e).toInt();
    s = e + 1;
    for (int i = 0; i < numP; i++) {
      e = content.indexOf(',', s);
      p[i] = content.substring(s, e).toInt();
      s = e + 1;
      e = content.indexOf(',', s);
      sch[i].sH = content.substring(s, e).toInt();
      s = e + 1;
      e = content.indexOf(',', s);
      sch[i].sM = content.substring(s, e).toInt();
      s = e + 1;
      e = content.indexOf(',', s);
      sch[i].eH = content.substring(s, e).toInt();
      s = e + 1;
      e = content.indexOf(',', s);
      sch[i].eM = content.substring(s, e).toInt();
      s = e + 1;
    }
  }
}

void handleGetTime() {
  struct tm t;
  if (!getLocalTime(&t)) {
    srv.send(200, "text/plain", "Failed to get time");
    return;
  }
  char ts[64];
  strftime(ts, sizeof(ts), "%Y-%m-%d %H:%M:%S", &t);
  srv.send(200, "text/plain", ts);
}
